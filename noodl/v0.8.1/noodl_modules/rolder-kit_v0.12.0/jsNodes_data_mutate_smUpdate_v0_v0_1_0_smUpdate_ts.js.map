{"version":3,"file":"jsNodes_data_mutate_smUpdate_v0_v0_1_0_smUpdate_ts.js","sources":["./jsNodes/data/mutate/smUpdate/v0/v0.1.0/smUpdate.ts","./libs/dataService/1_transform/tools/deepFlush/v0.1.0/deepFlush.ts","./libs/dataService/2_back/mutate/mUpdate/v0.2.0/mUpdate.ts","./libs/dataService/2_back/mutate/updateUser/v0.2.0/updateUser.ts"],"sourcesContent":["import mUpdate from \"../../../../../../libs/dataService/2_back/mutate/mUpdate/v0.2.0/mUpdate\"\nimport updateUser from \"../../../../../../libs/dataService/2_back/mutate/updateUser/v0.2.0/updateUser\"\nimport { sendOutput, sendSignal } from \"../../../../../../utils/noodl/send/v0.2.0/send\"\n\nconst signals = {\n  update: (noodlNode: NodeInstance) => {\n    const { updateScheme, optimistic }: { updateScheme: MCreateUpdateScheme[], optimistic: boolean } = noodlNode._inputValues\n    sendOutput(noodlNode, 'updating', true)\n\n    const mUupdatePromise = (scheme: MCreateUpdateScheme) => mUpdate(scheme, optimistic)\n    const updateUserPromise = (scheme: CreateUpdateUser) => updateUser(scheme, optimistic)\n    if (updateScheme) {\n      Promise.all(updateScheme.map((scheme: MCreateUpdateScheme) => {\n        if (scheme.dbClass === 'user') return scheme.items.map((i: any) => updateUserPromise(i))\n        else return mUupdatePromise(scheme)\n      })).then((results: any) => {\n        sendOutput(noodlNode, 'updatedData', results)\n        sendSignal(noodlNode, 'updated')\n        sendOutput(noodlNode, 'updating', false)\n      })\n    }\n  }\n}\n\nexport default signals","import isEmpty from \"just-is-empty\";\nimport map from \"just-map-object\"\n\nexport default function deepFlush(item: any) {\n    const finalObj: any = {};\n    if (item && typeof item === 'object') {\n        map(item, (k, v) => {\n            if (typeof v === 'object' && !Array.isArray(v)) {\n                if (!isEmpty(v)) {\n                    const nestedObj = deepFlush(v)\n                    if (!isEmpty(nestedObj)) finalObj[k] = nestedObj\n                }\n            } else if (Array.isArray(v)) {\n                v.forEach((i) => {\n                    const nestedObj = deepFlush(i)\n                    if (nestedObj?.length) finalObj[k] = finalObj[k] ? [...finalObj[k], nestedObj] : [nestedObj]\n                })\n            } else if (v) finalObj[k] = v\n        })\n        return finalObj\n    } else if (item) return item\n    else if (Array.isArray(item)) throw new Error(`It is array, object expected: ${item}`)\n}","import conLog from \"../../../../../../utils/debug/conLog/v0.1.0/conLog\"\nimport ErrorHandler from \"../../../../../errorHandler/v0.1.0/ErrorHandler\"\nimport { setOptions } from \"../../../../0_query/tools/setDefaults/v0.2.0/setDefaults\"\nimport deepFlush from \"../../../../1_transform/tools/deepFlush/v0.1.0/deepFlush\"\nimport updateNItems from \"../../../../1_transform/update/v0.1.0/updateNItems\"\nimport { dbClassVersion, dbVersion } from \"../../../tools/getVersion/v0.2.0/getVersion\"\n\nconst mUpdate = async (updateItems: CreateUpdateItems, optimistic: boolean): Promise<NItem[]> => {\n    const { Kuzzle } = window\n    const { dbClass, items } = updateItems\n    const options = setOptions(dbClass)\n\n    const dbClassV = dbClassVersion(dbClass)\n    const flushedItems = items.map((i: any) => {\n        i._id = i.id\n        return deepFlush(i)\n    })\n\n    let nItems: NItem[] = []\n    if (optimistic) nItems = updateNItems(dbClass, flushedItems.map(i => ({ id: i.id, ...i.body })))\n    \n    conLog(`${dbClassV} mUpdate`, 'time')\n    conLog([`${dbClassV} props: `, { dbClass, flushedItems, options }])\n\n    return Kuzzle.connect().then(() =>\n        Kuzzle.document.mUpdate(dbVersion(), dbClassV, flushedItems, { ...options, retryOnConflict: 3 })\n            .then((response: any) => {\n                if (!optimistic) nItems = updateNItems(dbClass, flushedItems.map(i => ({ id: i.id, ...i.body })))\n\n                if (response.errors.length > 0) ErrorHandler({\n                    title: 'Системная ошибка!',\n                    message: 'Kuzzle mUpdate errors at dbClass ' + dbClassV + ': ' + JSON.stringify(response.errors)\n                })\n\n                conLog([`${dbClassV} mUpdated: `, nItems])\n                conLog(`${dbClassV} mUpdate`, 'timeEnd')\n\n                return nItems\n            })\n            .catch((error: any) => ErrorHandler({ title: 'Системная ошибка!', message: 'Kuzzle mUpdate ' + dbClassV + ': ' + error.message }))\n    )\n}\n\nexport default mUpdate","import conLog from \"../../../../../../utils/debug/conLog/v0.1.0/conLog\"\nimport ErrorHandler from \"../../../../../errorHandler/v0.1.0/ErrorHandler\"\nimport { setOptions } from \"../../../../0_query/tools/setDefaults/v0.2.0/setDefaults\"\nimport deepFlush from \"../../../../1_transform/tools/deepFlush/v0.1.0/deepFlush\"\nimport updateNItems from \"../../../../1_transform/update/v0.1.0/updateNItems\"\n\nconst updateUser = async (updateUser: CreateUpdateUser, optimistic: boolean): Promise<NItem> => {\n    const { Kuzzle } = window\n    const { id, body } = updateUser\n    const options = setOptions('user')\n    const flushedBody = deepFlush(body)\n\n    let nUser = {}\n    if (optimistic) nUser = updateNItems('user', [{ id, ...flushedBody }])?.[0]\n    let userBody = { ...body.content, credentials: { local: { notSecret: body.credentials?.local.notSecret } } }\n\n    conLog(`UpdateUser`, 'time')\n    conLog([`Props: `, { id, flushedBody, options }])\n\n    return Kuzzle.connect().then(() =>\n        Kuzzle.security.updateCredentials('local', id, body.credentials?.local)\n            .then(() => Kuzzle.security.updateUser(id, userBody, options)\n                .then(() => {\n                    if (!optimistic) nUser = updateNItems('user', [{ id, ...flushedBody }])?.[0]\n                    return nUser\n                }))\n            .catch((error: any) => ErrorHandler({ title: 'Системная ошибка!', message: 'Kuzzle updateUser ' + ': ' + error.message }))\n    )\n}\n\nexport default updateUser"],"names":["update","noodlNode","updateScheme","optimistic","_inputValues","sendOutput","mUupdatePromise","scheme","updateUserPromise","Promise","all","map","dbClass","items","i","then","results","sendSignal","deepFlush","item","finalObj","k","v","Array","isArray","forEach","nestedObj","length","Error","mUpdate","updateItems","Kuzzle","window","options","setOptions","dbClassV","dbClassVersion","flushedItems","_id","id","nItems","body","connect","document","dbVersion","retryOnConflict","response","errors","title","message","JSON","stringify","catch","error","updateUser","flushedBody","nUser","userBody","content","credentials","local","notSecret","security","updateCredentials"],"mappings":"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"}