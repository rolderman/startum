{"version":3,"file":"jsNodes_data_mutate_mUpdate_v0_1_0_mUpdate_ts.js","sources":["./jsNodes/data/mutate/mUpdate/v0.1.0/mUpdate.ts","./libs/kuzzle/v.0.1.0/mUpdate.ts"],"sourcesContent":["import mUpdate from \"../../../../../libs/kuzzle/v.0.1.0/mUpdate\"\n\nexport default async function node(noodleNode: any) {\n    noodleNode.setOutputs({ updating: true })\n    mUpdate(noodleNode.inputs.updateItems)\n        .then((response) => {\n            noodleNode.setOutputs({ updating: false, updatedItems: response })\n            noodleNode.sendSignalOnOutput('updated')\n        })\n}","import { convertKuzzleResponse, dbVersion, dbClassVersion } from '../../../utils/data/v0.3.0/data'\nimport ErrorHandler from '../../errorHandler/v0.1.0/ErrorHandler'\nimport useData from '../../useData/v0.2.0/useData'\n\nconst mUpdate = async ({ dbClass, items }: { dbClass: string, items: any }) => {\n    const Kuzzle = window.Kuzzle\n    const { debug, dbClasses } = window.Rolder\n\n    const index = dbVersion()\n    const dbClassV = dbClassVersion(dbClass)\n\n    if (debug > 0) console.time(dbClassV + ' mUpdate time')\n    if (debug > 1) console.log(dbClassV + ' props:', { dbClass, items })\n\n    items.forEach((i: any) => {\n        i._id = i.id\n        delete i.id\n    })\n\n    return Kuzzle.connect().then(() =>\n        Kuzzle.document.mUpdate(index, dbClassV, items, { refresh: 'wait_for', retryOnConflict: 3 })\n            .then((response: any) => {\n                if (!dbClasses[dbClass].subscribe) useData.invalidate({ dbClass })\n                const jsonItems = response.successes.map((k: any) => convertKuzzleResponse(k))\n\n                if (response.errors.length > 0) ErrorHandler({\n                    title: 'Системная ошибка!',\n                    message: 'Kuzzle mUpdate errors at class ' + dbClassV + ': ' + JSON.stringify(response.errors)\n                })\n                if (debug > 1) console.log(dbClassV + ' mUpdated:', jsonItems)\n                if (debug > 0) console.timeEnd(dbClassV + ' mUpdate time')\n                return jsonItems\n            })\n            .catch((error: any) => ErrorHandler({ title: 'Системная ошибка!', message: 'Kuzzle mUpdate ' + dbClassV + ': ' + error.message }))\n    )\n}\n\nexport default mUpdate"],"names":["node","noodleNode","setOutputs","updating","inputs","updateItems","then","response","updatedItems","sendSignalOnOutput","mUpdate","dbClass","items","Kuzzle","window","debug","dbClasses","Rolder","index","dbVersion","dbClassV","dbClassVersion","console","time","log","forEach","i","_id","id","connect","document","refresh","retryOnConflict","subscribe","jsonItems","successes","map","k","convertKuzzleResponse","errors","length","title","message","JSON","stringify","timeEnd","catch","error"],"mappings":"wNAEe,eAAeA,EAAKC,CAAe,EAC9CA,EAAWC,UAAU,CAAC,CAAEC,SAAU,EAAK,GACvC,cAAQF,EAAWG,MAAM,CAACC,WAAW,EAChCC,IAAI,CAAC,AAACC,IACHN,EAAWC,UAAU,CAAC,CAAEC,SAAU,GAAOK,aAAcD,CAAS,GAChEN,EAAWQ,kBAAkB,CAAC,UAClC,EACR,C,+HCLA,IAAMC,EAAU,MAAO,CAAEC,QAAAA,CAAO,CAAEC,MAAAA,CAAK,CAAmC,IACtE,IAAMC,EAASC,OAAOD,MAAM,CACtB,CAAEE,MAAAA,CAAK,CAAEC,UAAAA,CAAS,CAAE,CAAGF,OAAOG,MAAM,CAEpCC,EAAQ,KAAAC,SAAA,IACRC,EAAW,KAAAC,cAAA,EAAeV,GAUhC,OARII,EAAQ,GAAGO,QAAQC,IAAI,CAACH,EAAW,iBACnCL,EAAQ,GAAGO,QAAQE,GAAG,CAACJ,EAAW,UAAW,CAAET,QAAAA,EAASC,MAAAA,CAAM,GAElEA,EAAMa,OAAO,CAAC,AAACC,IACXA,EAAEC,GAAG,CAAGD,EAAEE,EAAE,CACZ,OAAOF,EAAEE,EAAE,AACf,GAEOf,EAAOgB,OAAO,GAAGvB,IAAI,CAAC,IACzBO,EAAOiB,QAAQ,CAACpB,OAAO,CAACQ,EAAOE,EAAUR,EAAO,CAAEmB,QAAS,WAAYC,gBAAiB,CAAE,GACrF1B,IAAI,CAAC,AAACC,IACC,CAACS,CAAS,CAACL,EAAQ,CAACsB,SAAS,EAAE,oBAAkB,CAAC,CAAEtB,QAAAA,CAAQ,GAChE,IAAMuB,EAAY3B,EAAS4B,SAAS,CAACC,GAAG,CAAC,AAACC,GAAW,KAAAC,qBAAA,EAAsBD,IAQ3E,OANI9B,EAASgC,MAAM,CAACC,MAAM,CAAG,GAAG,cAAa,CACzCC,MAAO,oBACPC,QAAS,kCAAoCtB,EAAW,KAAOuB,KAAKC,SAAS,CAACrC,EAASgC,MAAM,CACjG,GACIxB,EAAQ,GAAGO,QAAQE,GAAG,CAACJ,EAAW,aAAcc,GAChDnB,EAAQ,GAAGO,QAAQuB,OAAO,CAACzB,EAAW,iBACnCc,CACX,GACCY,KAAK,CAAC,AAACC,GAAe,cAAa,CAAEN,MAAO,oBAAqBC,QAAS,kBAAoBtB,EAAW,KAAO2B,EAAML,OAAO,AAAC,IAE3I,EAEA,MAAehC,C"}