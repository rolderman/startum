{"version":3,"file":"~jsNodes_data_uploadFiles_uploadWebCamShots_v0_1_0_uploadWebCamShots_ts.js","sources":["./jsNodes/data/uploadFiles/uploadWebCamShots/v0.1.0/uploadWebCamShots.ts"],"sourcesContent":["import { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\"\n\nfunction dataURLtoFile(dataurl: string, filename: string) {\n    var arr: any[] = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n}\n\nexport default async function node(noodleNode: any) {\n    const { envVersion, project, debug } = window.Rolder\n    const uploadItems = noodleNode.inputs.uploadItems.map((f: any) => f.data)\n    const uploadFolder = noodleNode.inputs.uploadFolder\n    noodleNode.setOutputs({ uploading: true })\n    if (debug > 0) console.time('upload Webcam shots time')\n\n    const credentials = {\n        region: 'ru-central1',\n        endpoint: 'https://storage.yandexcloud.net/' + envVersion + '/' + uploadFolder,\n        credentials: {\n            accessKeyId: 'YCAJES4b5ZqT9Mp_Hc5_o3NdR',\n            secretAccessKey: 'YCMkuACnCQfcvpZiGGAOUFsxnBC7PmZ8CKP0pA8Y'\n        }\n    }\n    const s3 = new S3Client(credentials)\n\n    function upload(fd: any) {\n        const fileBinary = dataURLtoFile(fd.data, fd.name)\n        const params = {\n            Bucket: 'rolder-' + project,\n            Key: fd.name,\n            Body: fileBinary,\n            ContentType: fd.contentType\n        }\n        const command = new PutObjectCommand(params)\n        return s3.send(command)\n    }\n\n    Promise.all(uploadItems.map((fd: any) => upload(fd))).then(() => {\n        noodleNode.setOutputs({\n            uploading: false,\n            uploadedUrls: uploadItems.map((fd: any) => 'https://storage.yandexcloud.net/rolder-' + project + '/' + envVersion + '/' + uploadFolder + '/' + fd.name)\n        })\n        noodleNode.sendSignalOnOutput('uploaded')\n        if (debug > 0) console.timeEnd('upload Webcam shots time')\n    })\n}"],"names":["node","noodleNode","envVersion","project","debug","window","Rolder","uploadItems","inputs","map","f","data","uploadFolder","setOutputs","uploading","console","time","s3","S3Client","region","endpoint","credentials","accessKeyId","secretAccessKey","Promise","all","fd","upload","fileBinary","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","name","params","Bucket","Key","Body","ContentType","contentType","command","PutObjectCommand","send","then","uploadedUrls","sendSignalOnOutput","timeEnd"],"mappings":"6QAee,eAAeA,EAAKC,CAAe,EAC9C,GAAM,CAAEC,WAAAA,CAAU,CAAEC,QAAAA,CAAO,CAAEC,MAAAA,CAAK,CAAE,CAAGC,OAAOC,MAAM,CAC9CC,EAAcN,EAAWO,MAAM,CAACD,WAAW,CAACE,GAAG,CAAC,AAACC,GAAWA,EAAEC,IAAI,EAClEC,EAAeX,EAAWO,MAAM,CAACI,YAAY,CACnDX,EAAWY,UAAU,CAAC,CAAEC,UAAW,EAAK,GACpCV,EAAQ,GAAGW,QAAQC,IAAI,CAAC,4BAU5B,IAAMC,EAAK,IAAI,EAAAC,QAAQ,CARH,CAChBC,OAAQ,cACRC,SAAU,mCAAqClB,EAAa,IAAMU,EAClES,YAAa,CACTC,YAAa,4BACbC,gBAAiB,0CACrB,CACJ,GAeAC,QAAQC,GAAG,CAAClB,EAAYE,GAAG,CAAC,AAACiB,GAAYC,AAZzC,UAAgBD,CAAO,EACnB,IAAME,EAAaC,AA/B3B,SAAuBC,CAAe,CAAEC,CAAgB,EAOpD,IANA,IAAIC,EAAaF,EAAQG,KAAK,CAAC,KAC3BC,EAAOF,CAAG,CAAC,EAAE,CAACG,KAAK,CAAC,UAAU,CAAC,EAAE,CACjCC,EAAOC,KAAKL,CAAG,CAAC,EAAE,EAClBM,EAAIF,EAAKG,MAAM,CACfC,EAAQ,IAAIC,WAAWH,GAEpBA,KACHE,CAAK,CAACF,EAAE,CAAGF,EAAKM,UAAU,CAACJ,GAE/B,OAAO,IAAIK,KAAK,CAACH,EAAM,CAAET,EAAU,CAAEa,KAAMV,CAAK,EACpD,EAoByCR,EAAGf,IAAI,CAAEe,EAAGmB,IAAI,EAC3CC,EAAS,CACXC,OAAQ,UAAY5C,EACpB6C,IAAKtB,EAAGmB,IAAI,CACZI,KAAMrB,EACNsB,YAAaxB,EAAGyB,WAAW,AAC/B,EACMC,EAAU,IAAI,EAAAC,gBAAgB,CAACP,GACrC,OAAO7B,EAAGqC,IAAI,CAACF,EACnB,GAEgD1B,KAAM6B,IAAI,CAAC,KACvDtD,EAAWY,UAAU,CAAC,CAClBC,UAAW,GACX0C,aAAcjD,EAAYE,GAAG,CAAC,AAACiB,GAAY,0CAA4CvB,EAAU,IAAMD,EAAa,IAAMU,EAAe,IAAMc,EAAGmB,IAAI,CAC1J,GACA5C,EAAWwD,kBAAkB,CAAC,YAC1BrD,EAAQ,GAAGW,QAAQ2C,OAAO,CAAC,2BACnC,EACJ,C"}