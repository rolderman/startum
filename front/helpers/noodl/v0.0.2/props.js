export const enums = {
    sizes: [{ value: 'xs', label: 'xs' }, { value: 'sm', label: 'sm' }, { value: 'md', label: 'md' }, { value: 'lg', label: 'lg' }, { value: 'xl', label: 'xl' }],
    directions: [{ value: 'row', label: 'Row' }, { value: 'column', label: 'Column' }],
    groupPositions: [{ value: 'left', label: 'Left' }, { value: 'center', label: 'Center' }, { value: 'right', label: 'Right' }, { value: 'apart', label: 'Apart' }],
    checkBoxPositions: [{ value: 'top', label: 'Top' }, { value: 'right', label: 'Right' }, { value: 'left', label: 'Left' }],
    drawerPositions: [{ value: 'top', label: 'Top' }, { value: 'right', label: 'Right' }, { value: 'left', label: 'Left' }, { value: 'bottom', label: 'Bottom' }],
    flexAligns: [{ value: 'stretch', label: 'Stretch' }, { value: 'center', label: 'Center' }, { value: 'flex-start', label: 'Flex start' }, { value: 'flex-end', label: 'Flex end' }],
    flexAligns2: [{ value: 'center', label: 'Center' }, { value: 'flex-start', label: 'Flex start' }, { value: 'flex-end', label: 'Flex end' }],
    flexJustifies: [{ value: 'center', label: 'Center' }, { value: 'flex-start', label: 'Flex start' }, { value: 'flex-end', label: 'Flex end' }, { value: 'space-between', label: 'Space between' }, { value: 'space-around', label: 'Space around' }],
    flexJustifies2: [{ value: 'center', label: 'Center' }, { value: 'flex-start', label: 'Flex start' }, { value: 'flex-end', label: 'Flex end' }],
    variants: [{ value: 'light', label: 'Light' }, { value: 'filled', label: 'Filled' }, { value: 'outline', label: 'Outline' }],
    actionVariants: [{ value: 'transparent', label: 'Transparent' }, { value: 'subtle', label: 'Subtle' }, { value: 'filled', label: 'Filled' }, { value: 'light', label: 'Light' }, { value: 'outline', label: 'Outline' }, { value: 'default', label: 'Default' }],
    fontWeights: [{ value: '600', label: 'Medium' }, { value: '700', label: 'Bold' }],
    colors: [{ value: 'white', label: 'White' }, { value: 'gray', label: 'Gray' }, { value: 'dark', label: 'Dark' }, { value: 'blue', label: 'Blue' }, { value: 'red', label: 'Red' }],
    opTypes: [{ value: 'create', label: 'Create' }, { value: 'update', label: 'Update' }],
    actionTypes: [{ value: 'submit', label: 'Submit' }],
    wraps: [{ value: 'wrap', label: 'Wrap' }, { value: 'nowrap', label: 'Nowrap' }, { value: 'wrap-reverse', label: 'Wrap reverse' }],
    selectableTypes: [{ value: 'singleRow', label: 'Single row' }, { value: 'multipleRows', label: 'Multiple rows' }, { value: 'singleCell', label: 'Single cell' }],
    lineVariants: [{ value: 'dashed', label: 'Dashed' }, { value: 'dotted', label: 'Dotted' }],
    loaderVariants: [{ value: 'bars', label: 'Bars' }, { value: 'dots', label: 'Dots' }],
    useDataTypes: [{ value: 'fetch', label: 'Fetch' }, { value: 'get', label: 'Get' }, { value: 'mGet', label: 'mGet' }],
    colorShades: [
        { value: '0', label: '0' }, { value: '1', label: '1' }, { value: '2', label: '2' }, { value: '3', label: '3' }, { value: '4', label: '4' }, { value: '5', label: '5' },
        { value: '6', label: '6' }, { value: '7', label: '7' }, { value: '8', label: '8' }, { value: '9', label: '9' }
    ],
    notificationsPositions: [
        { value: 'top-left', label: 'Top left' }, { value: 'top-right', label: 'Top right' }, { value: 'top-center', label: 'Top center' },
        { value: 'bottom-left', label: 'Bottom left' }, { value: 'bottom-right', label: 'Bottom right' }, { value: 'bottom-center', label: 'Bottom center' },
    ],
}
const units = {
    c: ['rem', 'px'],
    h: ['rem', 'vh', '%', 'px'],
    w: ['rem', 'vw', '%', 'px'],
}
const groups = { style: 'Style', layout: 'Layout', dimensions: 'Dimensions', font: 'Font', signals: 'Signals', date: 'Date' }

export const inputs = {
    disabled: { type: 'boolean', displayName: 'Disabled', group: groups.style, default: false },
    direction: { type: { name: 'enum', enums: enums.directions }, displayName: 'Direction', group: groups.layout, default: 'row', },
    orientation: { type: 'boolean', displayName: 'Vertical', group: groups.layout, default: false },
    lineVariant: { type: { name: 'enum', enums: enums.lineVariants }, displayName: 'Variant', group: groups.style },
    spacing: { type: { name: 'enum', enums: enums.sizes }, default: 'md', displayName: 'Spacing', group: groups.layout },
    gap: { type: { name: 'enum', enums: enums.sizes }, default: 'md', displayName: 'Gap', group: groups.layout },
    p: { type: { name: 'enum', enums: enums.sizes }, default: 'md', displayName: 'Padding', group: groups.layout },
    grow: { type: 'boolean', displayName: 'Grow', group: groups.layout, default: false },
    show: { type: 'boolean', displayName: 'Show', group: groups.signals },
    groupPosition: { type: { name: 'enum', enums: enums.groupPositions }, displayName: 'Position', group: groups.layout, default: 'left' },
    drawerPosition: { type: { name: 'enum', enums: enums.drawerPositions }, displayName: 'Position', group: groups.layout, default: 'right' },
    flexAlign: { type: { name: 'enum', enums: enums.flexAligns }, displayName: 'Align', group: groups.layout },
    flexAlign2: { type: { name: 'enum', enums: enums.flexAligns2 }, displayName: 'Align', group: groups.layout, default: 'stretch' },
    flexJustify: { type: { name: 'enum', enums: enums.flexJustifies }, displayName: 'Justify', group: groups.layout, default: 'center' },
    flexJustify2: { type: { name: 'enum', enums: enums.flexJustifies2 }, displayName: 'Justify', group: groups.layout },
    variant: { type: { name: 'enum', enums: enums.variants }, displayName: 'Variant', group: groups.style, default: 'light' },
    loaderVariant: { type: { name: 'enum', enums: enums.loaderVariants }, displayName: 'Variant', group: groups.style },
    actionVariant: { type: { name: 'enum', enums: enums.actionVariants }, displayName: 'Variant', group: groups.style, default: 'filled' },
    size: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Size', group: groups.dimensions, default: 'md' },
    sizeString: { type: 'string', displayName: 'Size', group: groups.dimensions, default: 'md' },
    gutter: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Gutter', group: groups.dimensions, default: 'md' },
    radius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Radius', group: groups.dimensions, default: 'md' },
    shadow: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Shadow', group: groups.style },
    sx: { type: 'array', displayName: 'Custom sx', group: 'Advanced Style', tooltip: "Example: [{ width: 100 }]" },
    text: { type: 'string', displayName: 'Text', group: 'Text' },
    title: { type: 'string', displayName: 'Title', group: groups.style },
    color: { type: { name: 'enum', enums: enums.colors }, displayName: 'Color', group: groups.style },
    iconSize: { type: { name: 'number', units: units.c, defaultUnit: 'rem' }, displayName: 'Icon size', group: groups.dimensions },
    opacity: { type: 'number', displayName: 'Opacity', group: groups.style },
    iconName: { type: 'string', displayName: 'Icon name', group: groups.style, default: 'Plus', tooltip: 'Find icon at tabler-icons.io and capitalize it: "SuperIconName"' },
    loading: { type: 'boolean', displayName: 'Loading', group: groups.style, default: false },
    placeholder: { type: 'string', displayName: 'Placeholder', group: 'Text', default: 'Placeholder' },
    label: { type: 'string', displayName: 'Label', group: 'Label', default: 'Label' },
    withAsterisk: { type: 'boolean', displayName: 'With asterisk', group: 'Label', default: false },
    dateFormat: { type: 'string', displayName: 'Date format', group: groups.date, default: 'YYYY-MM-DD HH:mm', tooltip: 'Dayjs format: DD.MM.YYYY HH:mm' },
    limitMinDate: { type: 'boolean', displayName: 'Limit minimal date', group: groups.date, default: false },
    daysOffset: { type: 'number', displayName: 'Minimum days offset', group: groups.date, default: 0, tooltip: 'Number of days to offset. Negative for past offset' },
    items: { type: 'array', displayName: 'Items', group: 'Data', tooltip: "Example: [{ value: 'option-1', label: 'Option 1' }]" },
    classNames: { type: 'array', displayName: 'Classnames', group: 'Data', tooltip: "Example: ['product', 'supplier']" },
    feilds: { type: 'array', displayName: 'Feilds', group: 'Data', tooltip: "Example: ['data.name.search', 'data.anotheField.search']" },
    min: { type: 'number', displayName: 'Minimum', group: groups.style, default: 0 },
    max: { type: 'number', displayName: 'Maximum', group: groups.style, default: 100 },
    step: { type: 'number', displayName: 'Step', group: groups.style, default: 10 },
    wrap: { type: { name: 'enum', enums: enums.wraps }, displayName: 'Wrap', group: groups.layout },
    parentItem: { type: 'object', displayName: 'Parent item', group: 'Data' },
    refData: { type: 'object', displayName: 'Reference data', group: 'Data', tooltip: 'Data for reference resolving. Structure: {className: items}' },
    item: { type: 'object', displayName: 'Data object', group: 'Data', tooltip: "Example: {className: 'task', body: {...}}" },
    foundedData: { type: 'object', displayName: 'Founded data', group: 'Data' },
    searchEnabled: { type: 'boolean', displayName: 'Search enabled', group: 'Data', default: false },
    ids: { type: 'array', displayName: 'Ids', group: 'Data', tooltip: "Example: ['id1', 'id2']" },
    isLoading: { type: 'boolean', displayName: 'Loading', group: 'Data', default: false },
    formScheme: { type: 'array', displayName: 'Form scheme', group: 'Data', tooltip: "Example: [{name: 'startDate', initialValue: new Date(), validate: isNotEmpty}]" },
    clearable: { type: 'boolean', displayName: 'Clearable', group: 'Data', default: true },
    run: { type: 'boolean', displayName: 'Run trigger', group: 'Signals', default: false },
    labelField: { type: 'string', displayName: 'Label field', group: 'Data', default: 'data.name' },
    opType: { type: { name: 'enum', enums: enums.opTypes }, displayName: 'Operation type', group: 'Data' },
    value: { type: 'any', displayName: 'Value', group: 'Data' },
    id: { type: 'string', displayName: 'Object id', group: 'Data' },
    spans: { type: 'array', displayName: 'Spans', group: 'Data', tooltip: "Example: [4,4,4] One row = 12. Can be number, auor, content" },
    height: { type: 'string', displayName: 'Height', group: groups.dimensions },
    withBorder: { type: 'boolean', displayName: 'With borders', group: groups.style, default: false },
    withCloseButton: { type: 'boolean', displayName: 'With close button', group: groups.style, default: true, tooltip: "Hides close buttin and title" },
    height: { type: { name: 'number', units: units.h, defaultUnit: 'rem' }, displayName: 'Height', group: groups.dimensions },
    width: { type: { name: 'number', units: units.w, defaultUnit: 'rem' }, displayName: 'Width', group: groups.dimensions },    
    sxBackgroundColor: {
        backgroundColor: { type: { name: 'enum', enums: enums.colors }, displayName: 'Background color', group: groups.style },
        colorShade: { type: { name: 'enum', enums: enums.colorShades }, displayName: 'Color shade', group: groups.style, default: '6' },
    },
    useData: {
        useDataType: { type: { name: 'enum', enums: enums.useDataTypes }, displayName: 'Type', group: 'UseData', default: 'fetch' },
        useDataEnabled: { type: 'boolean', displayName: 'Enabled', group: 'UseData', default: false },
        className: { type: 'string', displayName: 'Classname', group: 'Data' },
        setRefs: { type: 'boolean', displayName: 'Set references', group: 'Data', default: false, tooltip: "Fill data to reference, if exists at Noodl.Objects.Data" },
        refMap: { type: 'array', displayName: 'Reference map', group: 'Data', tooltip: "Example: [{product: ['supplier', 'warehouse']}]" },
        query: { type: 'array', displayName: 'Query', group: 'Params', tooltip: "Example: [{ data.name: { 'ta-da!!!'} }]" },
        sorts: { type: 'array', displayName: 'Sorts', group: 'Params', tooltip: "Example: [{ data.name: 'asc' }]" },
        options: { type: 'array', displayName: 'Options', group: 'Params', tooltip: "Example: [{ size: 100 }]" },
        id: { type: 'string', displayName: 'Object id', group: 'Params' },
        ids: { type: 'array', displayName: 'Objects Ids', group: 'Params', tooltip: "Example: ['id1', 'id2']" },
    },
    data: {
        className: { type: 'string', displayName: 'Classname', group: 'Data' },
        query: { type: 'array', displayName: 'Query', group: 'Data', tooltip: "Example: [{ data.name: { 'ta-da!!!'} }]" },
        sorts: { type: 'array', displayName: 'Sorts', group: 'Data', tooltip: "Example: [{ data.name: 'asc' }]" },
        options: { type: 'array', displayName: 'Options', group: 'Data', tooltip: "Example: [{ size: 100 }]" },
    },
    formatedValue: {
        formatValue: { type: 'boolean', displayName: 'Format value', group: 'Value', default: false },
        value: { type: 'string', displayName: 'Value', group: 'Value'},        
        template: { type: 'string', displayName: 'Format template', group: 'Value', tooltip: "Example: 'some text {{ content.name }} other text'" },
        itemId: { type: 'string', displayName: 'Item id', group: 'Value'},        
    },
    scrollArea: {
        bottomOffset: { type: 'number', displayName: 'Bottom offset', group: groups.dimensions },
    },
    icon: {
        size: { type: { name: 'number', units: units.c, defaultUnit: 'rem' }, displayName: 'Size', group: groups.dimensions },
        name: { type: 'string', displayName: 'Icon name', group: groups.style, default: 'Plus', tooltip: 'Find icon at tabler-icons.io and capitalize it: "SuperIconName"' },
        stroke: { type: 'number', displayName: 'Stroke', group: groups.style, default: 2 },
        color: { type: { name: 'enum', enums: enums.colors }, displayName: 'Color', group: groups.style },
    },
    margins: {
        mt: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin top', group: groups.layout },
        mr: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin right', group: groups.layout },
        mb: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin bottom', group: groups.layout },
        ml: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin left', group: groups.layout },
    },
    dimensions: {
        h: { type: { name: 'number', units: units.h, defaultUnit: 'rem' }, displayName: 'Height', group: groups.dimensions },
        w: { type: { name: 'number', units: units.w, defaultUnit: 'rem' }, displayName: 'Width', group: groups.dimensions },
    },
    font: {
        fz: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Size', group: groups.font },
        fw: { type: { name: 'enum', enums: enums.fontWeights }, displayName: 'Weight', group: groups.font },
    },
    form: {
        useForm: { type: 'boolean', displayName: 'Use form', group: 'Form' },
        formField: { type: 'string', displayName: 'Form field', group: 'Form' },
        form: { type: 'object', displayName: 'Form hooks' },
    },
    table: {
        className: { type: 'string', displayName: 'Classname', group: 'Data' },
        data: { type: 'object', displayName: 'Data', group: 'Data' },
        isLoading: { type: 'boolean', displayName: 'Loading', group: 'Data', default: false },
        columns: { type: 'array', displayName: 'Columns', group: 'Table' },
        shadow: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Shadow', group: groups.style },
        fontSize: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Font size', group: groups.style },
        borderRadius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Border radius', group: groups.style },
        verticalSpacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Vertical spacing', group: groups.layout },
        withBorder: { type: 'boolean', displayName: 'Table borders', group: groups.style, default: false },
        withColumnBorders: { type: 'boolean', displayName: 'Column borders', group: groups.style, default: false },
        height: { type: 'string', displayName: 'Height', group: groups.dimensions },
        width: { type: 'string', displayName: 'Width', group: groups.dimensions },
        noHeader: { type: 'boolean', displayName: 'No header', group: 'Table', default: false },
        selectable: { type: 'boolean', displayName: 'Selectable', group: 'Selectable', default: false },
        selectableType: { type: { name: 'enum', enums: enums.selectableTypes }, displayName: 'Type', group: 'Selectable', default: 'singleRow' },
        highlightOnHover: { type: 'boolean', displayName: 'Hightlight row on hover', group: 'Selectable', default: false },
        highlightSelectedRow: { type: 'boolean', displayName: 'Hightlight selected row', group: 'Selectable', default: false },
    },
    tableS: {
        columns: { type: 'array', displayName: 'Columns', group: 'Table' },
        searchEnabled: { type: 'boolean', displayName: 'Search enabled', group: 'Data', default: false },
        searchString: { type: 'string', displayName: 'Search string', group: 'Data' },
        searchFields: { type: 'array', displayName: 'Search fields', group: 'Data', tooltip: "Example: ['data.name.search', 'data.anotheField.search']" },
        fontSize: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Font size', group: groups.style },
        borderRadius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Border radius', group: groups.style },
        verticalSpacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Vertical spacing', group: groups.layout },
        withColumnBorders: { type: 'boolean', displayName: 'Column borders', group: groups.style, default: false },
        minHeight: { type: { name: 'number', units: units.h, defaultUnit: 'rem' }, displayName: 'Min height', group: groups.dimensions },
        width: { type: { name: 'number', units: units.w, defaultUnit: 'rem' }, displayName: 'Width', group: groups.dimensions },
        noHeader: { type: 'boolean', displayName: 'No header', group: 'Table', default: false }
    },
    eTable: {
        tableScheme: { type: 'array', displayName: 'Table scheme', group: 'Data' },
        data: { type: 'object', displayName: 'Data', group: 'Data' },
        filterMaps: { type: 'array', displayName: 'Filter maps', group: 'Data' },
        fontSize: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Font size', group: groups.style },
        borderRadius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Border radius', group: groups.style },
        verticalSpacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Vertical spacing', group: groups.layout },
        withColumnBorders: { type: 'boolean', displayName: 'Column borders', group: groups.style, default: false },
        minHeight: { type: { name: 'number', units: units.h, defaultUnit: 'rem' }, displayName: 'Min height', group: groups.dimensions },
        width: { type: { name: 'number', units: units.w, defaultUnit: 'rem' }, displayName: 'Width', group: groups.dimensions },
    },
    appShell: {
        enableHeader: { type: 'boolean', displayName: 'Header', group: 'App layout' },
        headerHeight: { type: 'number', displayName: 'Height', group: 'Header', default: 48 },
        enableFooter: { type: 'boolean', displayName: 'Footer', group: 'App layout' },
        enableNavbar: { type: 'boolean', displayName: 'Navbar', group: 'App layout' },
        navbarWidth: { type: 'boolean', displayName: 'Change default width', group: 'Navbar' },
        navbarWidthSm: { type: 'number', displayName: 'sm', group: 'Navbar', default: 160 },
        navbarWidthLg: { type: 'number', displayName: 'lg', group: 'Navbar', default: 240 },
        navItems: { type: 'array', displayName: 'Navigation items', group: 'Navigation' },
    }
}

export const outputs = {
    data: { type: 'object', displayName: 'Data', group: 'Data' },
    expandedItem: { type: 'object', displayName: 'Expanded item', group: 'Data' },
    items: { type: 'array', displayName: 'Items', group: 'Data' },
    foundedData: { type: 'object', displayName: 'Founded data', group: 'Data' },
    navigation: {
        selectedPath: { type: 'string', displayName: 'Selected path', group: 'Navigation' },
        pathChanged: { type: 'signal', displayName: 'Path changed', group: 'Navigation' },
    },
    sendClicked: { type: 'signal', displayName: 'Clicked' },
    hided: { type: 'signal', displayName: 'Hided' },
    form: { type: 'object', displayName: 'Form hooks' },
    working: { type: 'boolean', displayName: 'Working', group: 'Data' },
    sendCreated: { type: 'signal', displayName: 'Created', group: 'Data' },
    sendDeleted: { type: 'signal', displayName: 'Deleted', group: 'Data' },
    text: { type: 'string', displayName: 'Text', group: 'Data' },
    sendTyped: { type: 'signal', displayName: 'Typed', group: 'Data' },
    sendReset: { type: 'signal', displayName: 'Reset', group: 'Data' },
    searchEnabled: { type: 'boolean', displayName: 'Search enabled', group: 'Data', default: false },
    selectedItem: { type: 'object', displayName: 'Selected item', group: 'Data' },
    sendSelected: { type: 'signal', displayName: 'Selected', group: 'Data' },
    selectedValue: { type: 'any', displayName: 'Selected value', group: 'Data' },
    selectedItems: { type: 'array', displayName: 'Selected items', group: 'Data' },
    sendViewItem: { type: 'signal', displayName: 'View item clicked' },
    sendEditItem: { type: 'signal', displayName: 'Edit item clicked' },
    isLoading: { type: 'boolean', displayName: 'Loading', group: 'Data', default: false },
    sendLoaded: { type: 'signal', displayName: 'Loaded', group: 'Data', },
}